#!/bin/bash
####################################################
#
# A simple script to auto-install Zenoss Core 4.2
#
# This script should be run on a base install of
# CentOS 5/6 or RHEL 5/6.
# JC - Added --no-check-certificate to all wget lines
#
###################################################

# Tee everything to /tmp/zenoss425_install.out
(
cat <<EOF
Welcome to the Zenoss Core auto-deploy script!

This auto-deploy script installs the Oracle Java Runtime Environment (JRE).
To continue, please review and accept the Oracle Binary Code License Agreement
for Java SE. 

Press Enter to continue.
EOF
read
less licenses/Oracle-BCLA-JavaSE
while true; do
    read -p "Do you accept the Oracle Binary Code License Agreement for Java SE?" yn
    case $yn in
        [Yy]* ) echo "Install continues...."; break;;
        [Nn]* ) echo "Installation aborted."; exit;;
        * ) echo "Please answer yes or no.";;
    esac
done

pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd`
popd > /dev/null

umask 022
# this may or may not be helpful for an install issue some people are having, but shouldn't hurt:
unalias -a

if [ -L /opt/zenoss ]; then
	echo "/opt/zenoss appears to be a symlink. Please remove and re-run this script."
	exit 1
fi

if [ `rpm -qa | egrep -c -i "^mysql-"` -gt 0 ]; then
cat << EOF

It appears that the distro-supplied version of MySQL is at least partially installed,
or a prior installation attempt failed.

Please remove these packages, as well as their dependencies (often postfix), and then
retry this script:

$(rpm -qa | egrep -i "^mysql-")

EOF
exit 1
fi

try() {
	"$@"
	if [ $? -ne 0 ]; then
		echo "Command failure: $@"
		exit 1
	fi
}

die() {
	echo $*
	exit 1
}

disable_repo() {
	local conf=/etc/yum.repos.d/$1.repo
	if [ ! -e "$conf" ]; then
		echo "Yum repo config $conf not found"
	else
		sed -i -e 's/^enabled.*/enabled = 0/g' $conf
	fi
}

enable_repo() {
	local conf=/etc/yum.repos.d/$1.repo
	if [ ! -e "$conf" ]; then
		die "Yum repo config $conf not found -- exiting."
	else
		sed -i -e 's/^enabled.*/enabled = 1/g' $conf
	fi
}

enable_service() {
	try /sbin/chkconfig $1 on
	try /sbin/service $1 start
}

#Now that RHEL6 RPMs are released, lets try to be smart and pick RPMs based on that
if [ -f /etc/redhat-release ]; then
	elv=`cat /etc/redhat-release | gawk 'BEGIN {FS="release "} {print $2}' | gawk 'BEGIN {FS="."} {print $1}'`
	#EnterpriseLinux Version String. Just a shortcut to be used later
	els=el$elv
else
	#Bail
	die "Unable to determine version. I can't continue"
fi

echo "Ensuring Zenoss RPMs are not already present"
if [ `rpm -qa | grep -c -i ^zenoss` -gt 0 ]; then
	die "I see Zenoss Packages already installed. I can't handle that"
fi

MYTMP="$(PATH=/sbin:/usr/sbin:/bin:/usr/bin mktemp -d)"
cd $MYTMP || die "Couldn't change to temporary directory"
#Disable SELinux:

echo "Disabling SELinux..."
if [ -e /selinux/enforce ]; then
	echo 0 > /selinux/enforce
fi

if [ -e /etc/selinux/config ]; then
	sed -i -e 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
fi

openjdk="$(rpm -qa | grep java.*openjdk)"
if [ -n "$openjdk" ]; then
	echo "Attempting to remove existing OpenJDK..."
	try rpm -e $openjdk
fi

# Auto-detect latest build:
build=4.2.5-2108
rmqv=2.8.7
# SourceForge directory hierarchy changed December 2018.....
#zenoss_base_url="https://downloads.sourceforge.net/project/zenoss/zenoss-4.2/zenoss-4.2.5/"
zenoss_base_url="https://sourceforge.net/projects/zenoss/files/Community%20Edition%20v4%20%28final%29"
zenoss_rpm_file="zenoss_core-$build.$els.x86_64.rpm"

# Let's grab Zenoss first...

zenoss_gpg_key="http://wiki.zenoss.org/download/core/gpg/RPM-GPG-KEY-zenoss"
# This will skip download if RPM exists in temp dir, or if user has pre-downloaded the RPM
# and placed it in the same directory as the core-autodeploy script. The RPM install parts
# have also been modified to use the pre-downloaded version if available.
url="$zenoss_base_url/$zenoss_rpm_file"
if [ ! -f "$zenoss_rpm_file" ] && [ ! -f "$SCRIPTPATH/$zenoss_rpm_file" ];then
    echo "Downloading $zenoss_rpm_file..."
    try wget --no-check-certificate -N $url
fi

if [ `rpm -qa gpg-pubkey* | grep -c "aa5a1ad7-4829c08a"` -eq 0  ];then
	echo "Importing Zenoss GPG Key"
	try rpm --import $zenoss_gpg_key
fi

#MySQL 5.29 creates dependancy issues, we'll force 5.28 for the remainder of the life of 4.2
mysql_v="5.5.37-1"
echo "Using MySQL Community Release version $mysql_v"

jre_file="jre-6u31-linux-x64-rpm.bin"
jre_url="http://javadl.sun.com/webapps/download/AutoDL?BundleId=59622"
mysql_client_rpm="MySQL-client-$mysql_v.linux2.6.x86_64.rpm"
mysql_server_rpm="MySQL-server-$mysql_v.linux2.6.x86_64.rpm"
mysql_shared_rpm="MySQL-shared-$mysql_v.linux2.6.x86_64.rpm"
mysql_compat_rpm="MySQL-shared-compat-$mysql_v.linux2.6.x86_64.rpm"
epel_rpm_url=http://dl.fedoraproject.org/pub/epel/$elv/x86_64

#JC - disable rpmforge repo if present - it can cause problems
disable_repo rpmforge

# JC - get the zenoss deps (which sorts the rpmforge requirement)
wget --no-check-certificate http://deps.zenoss.com/yum/zenossdeps-4.2.x-1.$els.noarch.rpm
try yum --nogpgcheck -y localinstall zenossdeps-4.2.x-1.$els.noarch.rpm

echo "Installing EPEL Repo"
# JC - the regex epel* in the following wget also gets epel-rpm-macro which has new prereqs
#   (as of October 2016) of 3 python-rpm-macros packages (see http://www.zenoss.org/forum/146626 )
# In fact,  the epel-release package is in the 'extras' repo that comes with a minimal install of
#   centos so you can just do `yum install epel-release` and avoid the wget too. (thanks baileytj)

#wget --no-check-certificate -r -l1 --no-parent -A 'epel*.rpm' $epel_rpm_url
#try yum -y --nogpgcheck localinstall */pub/epel/$elv/x86_64/epel-*.rpm
yum install -y --nogpgcheck epel-release
disable_repo epel

echo "Installing RabbitMQ"
# JC - rabbitmq-server-2.8.7-1.noarch requires a prereq of erlang >= R12B-3
#   this is satisfied if the zenossdeps repo is installed

#wget --no-check-certificate http://deps.zenoss.com/yum/4.2.x/centos/6/os/x86_64/erlang-R12B-5.10.el6.x86_64.rpm
#try yum --enablerepo=epel -y --nogpgcheck localinstall erlang-R12B-5.10.el6.x86_64.rpm

try wget --no-check-certificate http://www.rabbitmq.com/releases/rabbitmq-server/v${rmqv}/rabbitmq-server-${rmqv}-1.noarch.rpm
try yum --enablerepo=epel -y --nogpgcheck localinstall rabbitmq-server-${rmqv}-1.noarch.rpm
# Scientific Linux 6 includes AMQP daemon -> qpidd stop it before starting rabbitmq
if [ -e /etc/init.d/qpidd ]; then
       try /sbin/service qpidd stop
       try /sbin/chkconfig qpidd off
fi
enable_service rabbitmq-server

echo "Downloading Files"
if [ ! -f $jre_file ];then
	echo "Downloading Oracle JRE"
	try wget --no-check-certificate -N -O $jre_file $jre_url
	try chmod +x $jre_file
fi
echo "Installing JRE"
try ./$jre_file

echo "Downloading and installing MySQL RPMs"
for file in $mysql_client_rpm $mysql_server_rpm $mysql_shared_rpm $mysql_compat_rpm;
do
	if [ ! -f $file ];then
		try wget --no-check-certificate -N http://wiki.zenoss.org/download/core/mysql/$file
	fi
	if [ ! -f $file ];then
		die "Failed to download $file. I can't continue"
	fi
	try yum -y --nogpgcheck localinstall $file
done

echo "Installing optimal /etc/my.cnf settings"
cat >> /etc/my.cnf << EOF
[mysqld]
max_allowed_packet=16M
innodb_buffer_pool_size = 256M
innodb_additional_mem_pool_size = 20M
EOF

echo "Configuring MySQL"
enable_service mysql
/usr/bin/mysqladmin -u root password ''
/usr/bin/mysqladmin -u root -h localhost password ''

# set up rrdtool, etc.
# JC - rrdtool is dependent on the zenossdeps repo

echo "Installing rrdtool"
try yum -y  install rrdtool-1.4.7

# JC - need perl-common-sense module
echo "===wget perl-common-sense.noarch===="
wget --no-check-certificate http://dl.fedoraproject.org/pub/epel/6/x86_64/perl-common-sense-3.5-1.$els.noarch.rpm
try yum --nogpgcheck -y localinstall perl-common-sense-3.5-1.$els.noarch.rpm

# JC - re-enable epel
enable_repo epel
yum clean all

echo "Installing Zenoss"
if [ -e $zenoss_rpm_file ]; then
	try yum -y localinstall --enablerepo=epel $zenoss_rpm_file
else
	# If already downloaded by user and manually placed next to core-autodeploy.sh, use that RPM instead.
	try yum -y localinstall --enablerepo=epel $SCRIPTPATH/$zenoss_rpm_file
fi

try cp $SCRIPTPATH/secure_zenoss.sh /opt/zenoss/bin/ 
try chown zenoss:zenoss /opt/zenoss/bin/secure_zenoss.sh
try chmod 0700 /opt/zenoss/bin/secure_zenoss.sh

echo "Securing Zenoss"
try su -l -c /opt/zenoss/bin/secure_zenoss.sh zenoss

try cp $SCRIPTPATH/zenpack_actions.txt /opt/zenoss/var

echo "Configuring and Starting some Base Services and Zenoss..."
for service in memcached snmpd zenoss; do
	try /sbin/chkconfig $service on
	try /sbin/service $service start
done

echo "Securing configuration files..."
try chmod -R go-rwx /opt/zenoss/etc

cat << EOF
Zenoss Core $build install completed successfully!

Please visit http://127.0.0.1:8080 in your favorite Web browser to complete
setup.

NOTE: You may need to disable or modify this server's firewall to access port
8080. To disable this system's firewall, type:

# service iptables save
# service iptables stop
# chkconfig iptables off

Alternatively, you can modify your firewall to enable incoming connections to
port 8080. Here is a full list of all the ports Zenoss accepts incoming
connections from, and their purpose:

	8080 (TCP)                 Web user interface
	11211 (TCP and UDP)        memcached
	514 (UDP)                  syslog
	162 (UDP)                  SNMP traps


If you encounter problems with this script, please report them on the
following wiki page:

http://wiki.zenoss.org/index.php?title=Talk:Install_Zenoss

Thank you for using Zenoss. Happy monitoring!
EOF

echo "====================== Installing zenup and SUP 743 ======================="
# Get zenup package and install - downloads go in the temporary directory created under /tmp
# JC testing - url is wrong - stash zenup code in auto-deploy directory directly
#try wget --no-check-certificate https://sourceforge.net/projects/zenoss/files/zenup-1.1/zenup-1.1.0.267.869d67a-1.$els.x86_64.rpm/download -O zenup-1.1.0.267.869d67a-1.$els.x86_64.rpm

zenuprpm="zenup-1.1.0.267.869d67a-1.el6.x86_64.rpm"
zenuprpmurl="$zenoss_base_url/$zenuprpm"
try wget --no-check-certificate -N $zenuprpmurl

#CODEPATH="/home/jane/Zenoss_4.2.5_core-autodeploy"
#cp /mnt/hgfs/code/zenoss/zenup-1.1.0.267.869d67a-1.el6.x86_64.rpm .
#cp "$CODEPATH/pre_req_downloads/zenup-1.1.0.267.869d67a-1.el6.x86_64.rpm" .
#try yum --nogpgcheck -y localinstall zenup-1.1.0.267.869d67a-1.$els.x86_64.rpm
try yum --nogpgcheck -y localinstall $zenuprpm

#Get pristine and SUP732
# JC testing - url is wrong - stash pristine code in auto-deploy directory directly
#try wget --no-check-certificate https://sourceforge.net/projects/zenoss/files/zenoss-4.2/zenoss-4.2.5/updates/2014-08-06/zenoss_core-4.2.5-2108.$els-pristine-SP203.tgz/download -O zenoss_core-4.2.5-2108.$els-pristine-SP203.tgz
#try wget --no-check-certificate  https://sourceforge.net/projects/zenoss/files/zenoss-4.2/zenoss-4.2.5/updates/2016-02-26/zenoss_core-4.2.5-SP732-zenup11.zup/download -O zenoss_core-4.2.5-SP732-zenup11.zup
# JC testing - url is wrong - stash SUP in auto-deploy directory directly
#try wget --no-check-certificate  https://community-artifacts.s3.amazonaws.com/zenoss_core-4.2.5-SP732-zenup11.zup -O zenoss_core-4.2.5-SP732-zenup11.zup

pristine="zenoss_core-4.2.5-2108.el6-pristine-SP743.tgz"
pristineurl="$zenoss_base_url/$pristine"
try wget --no-check-certificate -N $pristineurl

#cp "$CODEPATH/pre_req_downloads/zenoss_core-4.2.5-2108.el6-pristine-SP203.tgz" .
#cp /mnt/hgfs/code/zenoss/zenoss_core-4.2.5-2108.el6-pristine-SP203.tgz .
#cp /mnt/hgfs/code/zenoss/zenoss_core-4.2.5-SP732-zenup11.zup .
#cp /mnt/hgfs/code/zenoss/zenoss_core-4.2.5-SP743-zenup11.zup .

# Get the SP743 zup file from SourceForge
zenoss_zup_file="zenoss_core-4.2.5-SP743-zenup11.zup"
url="$zenoss_base_url/$zenoss_zup_file"
if [ ! -f "$zenoss_zup_file" ] && [ ! -f "$SCRIPTPATH/$zenoss_zup_file" ];then
    echo "Downloading $zenoss_zup_file..."
    try wget --no-check-certificate -N $url
fi

# Copy the pristine and zup files to /tmp and change ownership to zenoss
cp $pristine /tmp
try chown zenoss:zenoss /tmp/$pristine
#cp zenoss_core-4.2.5-SP732-zenup11.zup /tmp
#try chown zenoss:zenoss /tmp/zenoss_core-4.2.5-SP732-zenup11.zup
cp $zenoss_zup_file /tmp
try chown zenoss:zenoss /tmp/$zenoss_zup_file

#  Copy pristine to $ZENHOME/../zenup  and run zenup init
#su -l -c "cp /tmp/zenoss_core-4.2.5-2108.$els-pristine-SP203.tgz \$ZENHOME/../zenup && zenup init \$ZENHOME/../zenup/zenoss_core-4.2.5-2108.$els-pristine-SP203.tgz \$ZENHOME" zenoss
su -l -c "cp /tmp/$pristine \$ZENHOME/../zenup && zenup init \$ZENHOME/../zenup/$pristine \$ZENHOME" zenoss

echo "Pristine file $pristine installed"
#  Copy sup file to $ZENHOME/../zenup  and run zenup install
# Install SUP743 supply ENTER to respond with default to 2 questions
su -l -c "cp /tmp/$zenoss_zup_file \$ZENHOME/../zenup && (echo ''; echo '') | zenup install \$ZENHOME/../zenup/$zenoss_zup_file" zenoss

echo "SUP file $zenoss_zup_file  installed"

# There is an issue with code from SUP732 (see ticket ZEN-30167, which affects the propagation of
#    a change in production status.  Thanks to Jay for the patch.  It only affects /opt/zenoss/products/ZenModel/Device.py.
#    This file changed between SUP732 and SUP743 but not to fix this production status issue.

echo "Fixing Device.py for production state change - see ticket ZEN-30167."
#cp /mnt/hgfs/rwshare/ZEN-30167/ZEN-30167_for_SUP743_from_opt_zenoss.patch /tmp
cp "$SCRIPTPATH/ZEN-30167_for_SUP743_from_opt_zenoss.patch" /tmp
su -l -c "cp /tmp/ZEN-30167_for_SUP743_from_opt_zenoss.patch \$ZENHOME &&  cd \$ZENHOME && patch -p0 < ZEN-30167_for_SUP743_from_opt_zenoss.patch" zenoss


# There is an issue with code from SUP743 that affects some paging notifications.
#    Thanks to Jay for the patch.  It only affects /opt/zenoss/products/ZenModel/actions.py.

echo "Fixing actions.py for paging notification issue with SUP743"
#cp /mnt/hgfs/rwshare/ZEN-30167/actions_skipfails_for_SUP743_from_opt_zenoss.patch /tmp
#cp "$CODEPATH/pre_req_downloads/actions_skipfails_for_SUP743_from_opt_zenoss.patch" /tmp
cp "$SCRIPTPATH/actions_skipfails_for_SUP743_from_opt_zenoss.patch" /tmp
su -l -c "cp /tmp/actions_skipfails_for_SUP743_from_opt_zenoss.patch \$ZENHOME &&  cd \$ZENHOME && patch -p0 < actions_skipfails_for_SUP743_from_opt_zenoss.patch" zenoss


# Check zenup status - verbose flag gives ALL patches - LOTS of output
#su -l -c "zenup status --verbose" zenoss
su -l -c "zenup status " zenoss

#Start zenoss daemons
su -l -c "zenoss start" zenoss

) | tee /tmp/zenoss425_install.out 2>&1

